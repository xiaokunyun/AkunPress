import{_ as e,o as t,c as o,d as r}from"./app.b0fa3394.js";const f=JSON.parse('{"title":"vitepress + TypeScript + Vite","description":"","frontmatter":{},"headers":[{"level":2,"title":"Recommended IDE Setup","slug":"recommended-ide-setup"},{"level":2,"title":"Type Support For .vue Imports in TS","slug":"type-support-for-vue-imports-in-ts"}],"relativePath":"README.md"}'),a={name:"README.md"},i=r('<h1 id="vitepress-typescript-vite" tabindex="-1">vitepress + TypeScript + Vite <a class="header-anchor" href="#vitepress-typescript-vite" aria-hidden="true">#</a></h1><h2 id="recommended-ide-setup" tabindex="-1">Recommended IDE Setup <a class="header-anchor" href="#recommended-ide-setup" aria-hidden="true">#</a></h2><h2 id="type-support-for-vue-imports-in-ts" tabindex="-1">Type Support For <code>.vue</code> Imports in TS <a class="header-anchor" href="#type-support-for-vue-imports-in-ts" aria-hidden="true">#</a></h2><p>Since TypeScript cannot handle type information for <code>.vue</code> imports, they are shimmed to be a generic Vue component type by default. In most cases this is fine if you don&#39;t really care about component prop types outside of templates. However, if you wish to get actual prop types in <code>.vue</code> imports (for example to get props validation when using manual <code>h(...)</code> calls), you can enable Volar&#39;s Take Over mode by following these steps:</p><ol><li>Run <code>Extensions: Show Built-in Extensions</code> from VS Code&#39;s command palette, look for <code>TypeScript and JavaScript Language Features</code>, then right click and select <code>Disable (Workspace)</code>. By default, Take Over mode will enable itself if the default TypeScript extension is disabled.</li><li>Reload the VS Code window by running <code>Developer: Reload Window</code> from the command palette.</li></ol><p>You can learn more about Take Over mode <a href="https://github.com/johnsoncodehk/volar/discussions/471" target="_blank" rel="noreferrer">here</a>.</p>',6),s=[i];function n(d,p,c,l,u,m){return t(),o("div",null,s)}const _=e(a,[["render",n]]);export{f as __pageData,_ as default};
